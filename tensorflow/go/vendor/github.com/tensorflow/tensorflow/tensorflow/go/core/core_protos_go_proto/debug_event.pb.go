// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/protobuf/debug_event.proto

package core_protos_go_proto // import "github.com/tensorflow/tensorflow/tensorflow/go/core/core_protos_go_proto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tensor_go_proto "github.com/tensorflow/tensorflow/tensorflow/go/core/framework/tensor_go_proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Available modes for extracting debugging information from a Tensor.
// TODO(cais): Document the detailed column names and semantics in a separate
// markdown file once the implementation settles.
type TensorDebugMode int32

const (
	TensorDebugMode_UNSPECIFIED TensorDebugMode = 0
	// Only records what tensors are computed, eagerly or in graphs.
	// No information regarding the value of the tensor is available.
	TensorDebugMode_NO_TENSOR TensorDebugMode = 1
	// A minimalist health summary for float-type tensors.
	// Contains information only about the presence/absence of pathological
	// values including Infinity and NaN.
	// Applicable only to float dtypes.
	TensorDebugMode_CURT_HEALTH TensorDebugMode = 2
	// A concise health summary for float-type tensors.
	// Contains more information that CURT_HEALTH.
	// Infinity and NaN are treated differently.
	// Applicable only to float and integer dtypes.
	TensorDebugMode_CONCISE_HEALTH TensorDebugMode = 3
	// A detailed health summary.
	// Contains further detailed information than `CONCISE_HEALTH`.
	// Information about device, dtype and shape are included.
	// Counts for various types of values (Infinity, NaN, negative, zero,
	// positive) are included.
	// Applicable to float, integer and boolean dtypes.
	TensorDebugMode_FULL_HEALTH TensorDebugMode = 4
	// Provides full runtime shape information, up to a maximum rank, beyond
	// which the dimension sizes are truncated.
	TensorDebugMode_SHAPE TensorDebugMode = 5
	// Full numeric summary.
	// Including device, dtype, shape, counts of various types of values
	// (Infinity, NaN, negative, zero, positive), and summary statistics
	// (minimum, maximum, mean and variance).
	// Applicable to float, integer and boolean dtypes.
	TensorDebugMode_FULL_NUMERICS TensorDebugMode = 6
	// Full tensor value.
	TensorDebugMode_FULL_TENSOR TensorDebugMode = 7
	// Reduce the elements of a tensor to a rank-1 tensor of shape [3], in which
	// - the 1st element is -inf if any element of the tensor is -inf,
	//   or zero otherwise.
	// - the 2nd element is +inf if any element of the tensor is +inf,
	//   or zero otherwise.
	// - the 3rd element is nan if any element of the tensor is nan, or zero
	//   otherwise.
	TensorDebugMode_REDUCE_INF_NAN_THREE_SLOTS TensorDebugMode = 8
)

var TensorDebugMode_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "NO_TENSOR",
	2: "CURT_HEALTH",
	3: "CONCISE_HEALTH",
	4: "FULL_HEALTH",
	5: "SHAPE",
	6: "FULL_NUMERICS",
	7: "FULL_TENSOR",
	8: "REDUCE_INF_NAN_THREE_SLOTS",
}
var TensorDebugMode_value = map[string]int32{
	"UNSPECIFIED":                0,
	"NO_TENSOR":                  1,
	"CURT_HEALTH":                2,
	"CONCISE_HEALTH":             3,
	"FULL_HEALTH":                4,
	"SHAPE":                      5,
	"FULL_NUMERICS":              6,
	"FULL_TENSOR":                7,
	"REDUCE_INF_NAN_THREE_SLOTS": 8,
}

func (x TensorDebugMode) String() string {
	return proto.EnumName(TensorDebugMode_name, int32(x))
}
func (TensorDebugMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debug_event_53a27412ea077773, []int{0}
}

// An Event related to the debugging of a TensorFlow program.
type DebugEvent struct {
	// Timestamp in seconds (with microsecond precision).
	WallTime float64 `protobuf:"fixed64,1,opt,name=wall_time,json=wallTime,proto3" json:"wall_time,omitempty"`
	// Step of training (if available).
	Step int64 `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	// Types that are valid to be assigned to What:
	//	*DebugEvent_DebugMetadata
	//	*DebugEvent_SourceFile
	//	*DebugEvent_StackFrameWithId
	//	*DebugEvent_GraphOpCreation
	//	*DebugEvent_DebuggedGraph
	//	*DebugEvent_Execution
	//	*DebugEvent_GraphExecutionTrace
	//	*DebugEvent_GraphId
	//	*DebugEvent_DebuggedDevice
	What                 isDebugEvent_What `protobuf_oneof:"what"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DebugEvent) Reset()         { *m = DebugEvent{} }
func (m *DebugEvent) String() string { return proto.CompactTextString(m) }
func (*DebugEvent) ProtoMessage()    {}
func (*DebugEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_event_53a27412ea077773, []int{0}
}
func (m *DebugEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugEvent.Unmarshal(m, b)
}
func (m *DebugEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugEvent.Marshal(b, m, deterministic)
}
func (dst *DebugEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugEvent.Merge(dst, src)
}
func (m *DebugEvent) XXX_Size() int {
	return xxx_messageInfo_DebugEvent.Size(m)
}
func (m *DebugEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DebugEvent proto.InternalMessageInfo

func (m *DebugEvent) GetWallTime() float64 {
	if m != nil {
		return m.WallTime
	}
	return 0
}

func (m *DebugEvent) GetStep() int64 {
	if m != nil {
		return m.Step
	}
	return 0
}

type isDebugEvent_What interface {
	isDebugEvent_What()
}

type DebugEvent_DebugMetadata struct {
	DebugMetadata *DebugMetadata `protobuf:"bytes,3,opt,name=debug_metadata,json=debugMetadata,proto3,oneof"`
}

type DebugEvent_SourceFile struct {
	SourceFile *SourceFile `protobuf:"bytes,4,opt,name=source_file,json=sourceFile,proto3,oneof"`
}

type DebugEvent_StackFrameWithId struct {
	StackFrameWithId *StackFrameWithId `protobuf:"bytes,6,opt,name=stack_frame_with_id,json=stackFrameWithId,proto3,oneof"`
}

type DebugEvent_GraphOpCreation struct {
	GraphOpCreation *GraphOpCreation `protobuf:"bytes,7,opt,name=graph_op_creation,json=graphOpCreation,proto3,oneof"`
}

type DebugEvent_DebuggedGraph struct {
	DebuggedGraph *DebuggedGraph `protobuf:"bytes,8,opt,name=debugged_graph,json=debuggedGraph,proto3,oneof"`
}

type DebugEvent_Execution struct {
	Execution *Execution `protobuf:"bytes,9,opt,name=execution,proto3,oneof"`
}

type DebugEvent_GraphExecutionTrace struct {
	GraphExecutionTrace *GraphExecutionTrace `protobuf:"bytes,10,opt,name=graph_execution_trace,json=graphExecutionTrace,proto3,oneof"`
}

type DebugEvent_GraphId struct {
	GraphId string `protobuf:"bytes,11,opt,name=graph_id,json=graphId,proto3,oneof"`
}

type DebugEvent_DebuggedDevice struct {
	DebuggedDevice *DebuggedDevice `protobuf:"bytes,12,opt,name=debugged_device,json=debuggedDevice,proto3,oneof"`
}

func (*DebugEvent_DebugMetadata) isDebugEvent_What() {}

func (*DebugEvent_SourceFile) isDebugEvent_What() {}

func (*DebugEvent_StackFrameWithId) isDebugEvent_What() {}

func (*DebugEvent_GraphOpCreation) isDebugEvent_What() {}

func (*DebugEvent_DebuggedGraph) isDebugEvent_What() {}

func (*DebugEvent_Execution) isDebugEvent_What() {}

func (*DebugEvent_GraphExecutionTrace) isDebugEvent_What() {}

func (*DebugEvent_GraphId) isDebugEvent_What() {}

func (*DebugEvent_DebuggedDevice) isDebugEvent_What() {}

func (m *DebugEvent) GetWhat() isDebugEvent_What {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *DebugEvent) GetDebugMetadata() *DebugMetadata {
	if x, ok := m.GetWhat().(*DebugEvent_DebugMetadata); ok {
		return x.DebugMetadata
	}
	return nil
}

func (m *DebugEvent) GetSourceFile() *SourceFile {
	if x, ok := m.GetWhat().(*DebugEvent_SourceFile); ok {
		return x.SourceFile
	}
	return nil
}

func (m *DebugEvent) GetStackFrameWithId() *StackFrameWithId {
	if x, ok := m.GetWhat().(*DebugEvent_StackFrameWithId); ok {
		return x.StackFrameWithId
	}
	return nil
}

func (m *DebugEvent) GetGraphOpCreation() *GraphOpCreation {
	if x, ok := m.GetWhat().(*DebugEvent_GraphOpCreation); ok {
		return x.GraphOpCreation
	}
	return nil
}

func (m *DebugEvent) GetDebuggedGraph() *DebuggedGraph {
	if x, ok := m.GetWhat().(*DebugEvent_DebuggedGraph); ok {
		return x.DebuggedGraph
	}
	return nil
}

func (m *DebugEvent) GetExecution() *Execution {
	if x, ok := m.GetWhat().(*DebugEvent_Execution); ok {
		return x.Execution
	}
	return nil
}

func (m *DebugEvent) GetGraphExecutionTrace() *GraphExecutionTrace {
	if x, ok := m.GetWhat().(*DebugEvent_GraphExecutionTrace); ok {
		return x.GraphExecutionTrace
	}
	return nil
}

func (m *DebugEvent) GetGraphId() string {
	if x, ok := m.GetWhat().(*DebugEvent_GraphId); ok {
		return x.GraphId
	}
	return ""
}

func (m *DebugEvent) GetDebuggedDevice() *DebuggedDevice {
	if x, ok := m.GetWhat().(*DebugEvent_DebuggedDevice); ok {
		return x.DebuggedDevice
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DebugEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DebugEvent_OneofMarshaler, _DebugEvent_OneofUnmarshaler, _DebugEvent_OneofSizer, []interface{}{
		(*DebugEvent_DebugMetadata)(nil),
		(*DebugEvent_SourceFile)(nil),
		(*DebugEvent_StackFrameWithId)(nil),
		(*DebugEvent_GraphOpCreation)(nil),
		(*DebugEvent_DebuggedGraph)(nil),
		(*DebugEvent_Execution)(nil),
		(*DebugEvent_GraphExecutionTrace)(nil),
		(*DebugEvent_GraphId)(nil),
		(*DebugEvent_DebuggedDevice)(nil),
	}
}

func _DebugEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DebugEvent)
	// what
	switch x := m.What.(type) {
	case *DebugEvent_DebugMetadata:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DebugMetadata); err != nil {
			return err
		}
	case *DebugEvent_SourceFile:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SourceFile); err != nil {
			return err
		}
	case *DebugEvent_StackFrameWithId:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StackFrameWithId); err != nil {
			return err
		}
	case *DebugEvent_GraphOpCreation:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GraphOpCreation); err != nil {
			return err
		}
	case *DebugEvent_DebuggedGraph:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DebuggedGraph); err != nil {
			return err
		}
	case *DebugEvent_Execution:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Execution); err != nil {
			return err
		}
	case *DebugEvent_GraphExecutionTrace:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GraphExecutionTrace); err != nil {
			return err
		}
	case *DebugEvent_GraphId:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.GraphId)
	case *DebugEvent_DebuggedDevice:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DebuggedDevice); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DebugEvent.What has unexpected type %T", x)
	}
	return nil
}

func _DebugEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DebugEvent)
	switch tag {
	case 3: // what.debug_metadata
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebugMetadata)
		err := b.DecodeMessage(msg)
		m.What = &DebugEvent_DebugMetadata{msg}
		return true, err
	case 4: // what.source_file
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SourceFile)
		err := b.DecodeMessage(msg)
		m.What = &DebugEvent_SourceFile{msg}
		return true, err
	case 6: // what.stack_frame_with_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StackFrameWithId)
		err := b.DecodeMessage(msg)
		m.What = &DebugEvent_StackFrameWithId{msg}
		return true, err
	case 7: // what.graph_op_creation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphOpCreation)
		err := b.DecodeMessage(msg)
		m.What = &DebugEvent_GraphOpCreation{msg}
		return true, err
	case 8: // what.debugged_graph
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebuggedGraph)
		err := b.DecodeMessage(msg)
		m.What = &DebugEvent_DebuggedGraph{msg}
		return true, err
	case 9: // what.execution
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Execution)
		err := b.DecodeMessage(msg)
		m.What = &DebugEvent_Execution{msg}
		return true, err
	case 10: // what.graph_execution_trace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GraphExecutionTrace)
		err := b.DecodeMessage(msg)
		m.What = &DebugEvent_GraphExecutionTrace{msg}
		return true, err
	case 11: // what.graph_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.What = &DebugEvent_GraphId{x}
		return true, err
	case 12: // what.debugged_device
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebuggedDevice)
		err := b.DecodeMessage(msg)
		m.What = &DebugEvent_DebuggedDevice{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DebugEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DebugEvent)
	// what
	switch x := m.What.(type) {
	case *DebugEvent_DebugMetadata:
		s := proto.Size(x.DebugMetadata)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugEvent_SourceFile:
		s := proto.Size(x.SourceFile)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugEvent_StackFrameWithId:
		s := proto.Size(x.StackFrameWithId)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugEvent_GraphOpCreation:
		s := proto.Size(x.GraphOpCreation)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugEvent_DebuggedGraph:
		s := proto.Size(x.DebuggedGraph)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugEvent_Execution:
		s := proto.Size(x.Execution)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugEvent_GraphExecutionTrace:
		s := proto.Size(x.GraphExecutionTrace)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugEvent_GraphId:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.GraphId)))
		n += len(x.GraphId)
	case *DebugEvent_DebuggedDevice:
		s := proto.Size(x.DebuggedDevice)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Metadata about the debugger and the debugged TensorFlow program.
type DebugMetadata struct {
	// Version of TensorFlow.
	TensorflowVersion string `protobuf:"bytes,1,opt,name=tensorflow_version,json=tensorflowVersion,proto3" json:"tensorflow_version,omitempty"`
	// Version of the DebugEvent file format.
	// Has a format of "debug.Event:<number>", e.g., "debug.Event:1".
	FileVersion string `protobuf:"bytes,2,opt,name=file_version,json=fileVersion,proto3" json:"file_version,omitempty"`
	// A unique ID for the current run of tfdbg.
	// A run of tfdbg is defined as a TensorFlow job instrumented by tfdbg.
	// Multiple hosts in a distributed TensorFlow job instrumented by tfdbg
	// have the same ID.
	TfdbgRunId           string   `protobuf:"bytes,3,opt,name=tfdbg_run_id,json=tfdbgRunId,proto3" json:"tfdbg_run_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugMetadata) Reset()         { *m = DebugMetadata{} }
func (m *DebugMetadata) String() string { return proto.CompactTextString(m) }
func (*DebugMetadata) ProtoMessage()    {}
func (*DebugMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_event_53a27412ea077773, []int{1}
}
func (m *DebugMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugMetadata.Unmarshal(m, b)
}
func (m *DebugMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugMetadata.Marshal(b, m, deterministic)
}
func (dst *DebugMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugMetadata.Merge(dst, src)
}
func (m *DebugMetadata) XXX_Size() int {
	return xxx_messageInfo_DebugMetadata.Size(m)
}
func (m *DebugMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DebugMetadata proto.InternalMessageInfo

func (m *DebugMetadata) GetTensorflowVersion() string {
	if m != nil {
		return m.TensorflowVersion
	}
	return ""
}

func (m *DebugMetadata) GetFileVersion() string {
	if m != nil {
		return m.FileVersion
	}
	return ""
}

func (m *DebugMetadata) GetTfdbgRunId() string {
	if m != nil {
		return m.TfdbgRunId
	}
	return ""
}

// Content of a source file involved in the execution of the debugged TensorFlow
// program.
type SourceFile struct {
	// Path to the file.
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// Name of the host on which the file is located.
	HostName string `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Line-by-line content of the file.
	Lines                []string `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SourceFile) Reset()         { *m = SourceFile{} }
func (m *SourceFile) String() string { return proto.CompactTextString(m) }
func (*SourceFile) ProtoMessage()    {}
func (*SourceFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_event_53a27412ea077773, []int{2}
}
func (m *SourceFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SourceFile.Unmarshal(m, b)
}
func (m *SourceFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SourceFile.Marshal(b, m, deterministic)
}
func (dst *SourceFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceFile.Merge(dst, src)
}
func (m *SourceFile) XXX_Size() int {
	return xxx_messageInfo_SourceFile.Size(m)
}
func (m *SourceFile) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceFile.DiscardUnknown(m)
}

var xxx_messageInfo_SourceFile proto.InternalMessageInfo

func (m *SourceFile) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *SourceFile) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *SourceFile) GetLines() []string {
	if m != nil {
		return m.Lines
	}
	return nil
}

// A stack frame with ID.
type StackFrameWithId struct {
	// A unique ID for the stack frame: A UUID-like string.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Stack frame, i.e., a frame of a stack trace, containing information
	// regarding the file name, line number, function name, code content
	// of the line, and column number (if available).
	FileLineCol          *GraphDebugInfo_FileLineCol `protobuf:"bytes,2,opt,name=file_line_col,json=fileLineCol,proto3" json:"file_line_col,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *StackFrameWithId) Reset()         { *m = StackFrameWithId{} }
func (m *StackFrameWithId) String() string { return proto.CompactTextString(m) }
func (*StackFrameWithId) ProtoMessage()    {}
func (*StackFrameWithId) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_event_53a27412ea077773, []int{3}
}
func (m *StackFrameWithId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StackFrameWithId.Unmarshal(m, b)
}
func (m *StackFrameWithId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StackFrameWithId.Marshal(b, m, deterministic)
}
func (dst *StackFrameWithId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackFrameWithId.Merge(dst, src)
}
func (m *StackFrameWithId) XXX_Size() int {
	return xxx_messageInfo_StackFrameWithId.Size(m)
}
func (m *StackFrameWithId) XXX_DiscardUnknown() {
	xxx_messageInfo_StackFrameWithId.DiscardUnknown(m)
}

var xxx_messageInfo_StackFrameWithId proto.InternalMessageInfo

func (m *StackFrameWithId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StackFrameWithId) GetFileLineCol() *GraphDebugInfo_FileLineCol {
	if m != nil {
		return m.FileLineCol
	}
	return nil
}

// Code location information: A stack trace with host-name information.
// Instead of encoding the detailed stack trace, this proto refers to IDs of
// stack frames stored as `StackFrameWithId` protos.
type CodeLocation struct {
	// Host name on which the source files are located.
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// ID to a stack frame, each of which is pointed to
	// by a unique ID. The ordering of the frames is consistent with Python's
	// `traceback.extract_tb()`.
	StackFrameIds        []string `protobuf:"bytes,2,rep,name=stack_frame_ids,json=stackFrameIds,proto3" json:"stack_frame_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CodeLocation) Reset()         { *m = CodeLocation{} }
func (m *CodeLocation) String() string { return proto.CompactTextString(m) }
func (*CodeLocation) ProtoMessage()    {}
func (*CodeLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_event_53a27412ea077773, []int{4}
}
func (m *CodeLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CodeLocation.Unmarshal(m, b)
}
func (m *CodeLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CodeLocation.Marshal(b, m, deterministic)
}
func (dst *CodeLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeLocation.Merge(dst, src)
}
func (m *CodeLocation) XXX_Size() int {
	return xxx_messageInfo_CodeLocation.Size(m)
}
func (m *CodeLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeLocation.DiscardUnknown(m)
}

var xxx_messageInfo_CodeLocation proto.InternalMessageInfo

func (m *CodeLocation) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *CodeLocation) GetStackFrameIds() []string {
	if m != nil {
		return m.StackFrameIds
	}
	return nil
}

// The creation of an op in a TensorFlow Graph (e.g., FuncGraph in TF2).
type GraphOpCreation struct {
	// Type of the op (e.g., "MatMul").
	OpType string `protobuf:"bytes,1,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	// Name of the op (e.g., "Dense/MatMul_1").
	OpName string `protobuf:"bytes,2,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
	// Name of the graph that the op is a part of (if available).
	GraphName string `protobuf:"bytes,3,opt,name=graph_name,json=graphName,proto3" json:"graph_name,omitempty"`
	// Unique ID of the graph (generated by debugger).
	// This is the ID of the immediately-enclosing graph.
	GraphId string `protobuf:"bytes,4,opt,name=graph_id,json=graphId,proto3" json:"graph_id,omitempty"`
	// Name of the device that the op is assigned to (if available).
	DeviceName string `protobuf:"bytes,5,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Names of the input tensors to the op.
	InputNames []string `protobuf:"bytes,6,rep,name=input_names,json=inputNames,proto3" json:"input_names,omitempty"`
	// Number of output tensors emitted by the op.
	NumOutputs int32 `protobuf:"varint,7,opt,name=num_outputs,json=numOutputs,proto3" json:"num_outputs,omitempty"`
	// The unique ID for code location (stack trace) of the op's creation.
	CodeLocation *CodeLocation `protobuf:"bytes,8,opt,name=code_location,json=codeLocation,proto3" json:"code_location,omitempty"`
	// Unique IDs for the output tensors of this op.
	OutputTensorIds      []int32  `protobuf:"varint,9,rep,packed,name=output_tensor_ids,json=outputTensorIds,proto3" json:"output_tensor_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphOpCreation) Reset()         { *m = GraphOpCreation{} }
func (m *GraphOpCreation) String() string { return proto.CompactTextString(m) }
func (*GraphOpCreation) ProtoMessage()    {}
func (*GraphOpCreation) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_event_53a27412ea077773, []int{5}
}
func (m *GraphOpCreation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphOpCreation.Unmarshal(m, b)
}
func (m *GraphOpCreation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphOpCreation.Marshal(b, m, deterministic)
}
func (dst *GraphOpCreation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphOpCreation.Merge(dst, src)
}
func (m *GraphOpCreation) XXX_Size() int {
	return xxx_messageInfo_GraphOpCreation.Size(m)
}
func (m *GraphOpCreation) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphOpCreation.DiscardUnknown(m)
}

var xxx_messageInfo_GraphOpCreation proto.InternalMessageInfo

func (m *GraphOpCreation) GetOpType() string {
	if m != nil {
		return m.OpType
	}
	return ""
}

func (m *GraphOpCreation) GetOpName() string {
	if m != nil {
		return m.OpName
	}
	return ""
}

func (m *GraphOpCreation) GetGraphName() string {
	if m != nil {
		return m.GraphName
	}
	return ""
}

func (m *GraphOpCreation) GetGraphId() string {
	if m != nil {
		return m.GraphId
	}
	return ""
}

func (m *GraphOpCreation) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *GraphOpCreation) GetInputNames() []string {
	if m != nil {
		return m.InputNames
	}
	return nil
}

func (m *GraphOpCreation) GetNumOutputs() int32 {
	if m != nil {
		return m.NumOutputs
	}
	return 0
}

func (m *GraphOpCreation) GetCodeLocation() *CodeLocation {
	if m != nil {
		return m.CodeLocation
	}
	return nil
}

func (m *GraphOpCreation) GetOutputTensorIds() []int32 {
	if m != nil {
		return m.OutputTensorIds
	}
	return nil
}

// A debugger-instrumented graph.
type DebuggedGraph struct {
	// An ID for the graph.
	// This can be used up to look up graph names. Generated by the debugger.
	GraphId string `protobuf:"bytes,1,opt,name=graph_id,json=graphId,proto3" json:"graph_id,omitempty"`
	// Name of the graph (if available).
	GraphName string `protobuf:"bytes,2,opt,name=graph_name,json=graphName,proto3" json:"graph_name,omitempty"`
	// Names of the instrumented ops. This can be used to look up op name
	// based on the numeric-summary tensors (2nd column).
	InstrumentedOps []string `protobuf:"bytes,3,rep,name=instrumented_ops,json=instrumentedOps,proto3" json:"instrumented_ops,omitempty"`
	// Original (uninstrumented) GraphDef (if available).
	OriginalGraphDef []byte `protobuf:"bytes,4,opt,name=original_graph_def,json=originalGraphDef,proto3" json:"original_graph_def,omitempty"`
	// An encoded version of a GraphDef.
	// This graph may include the debugger-inserted ops.
	InstrumentedGraphDef []byte `protobuf:"bytes,5,opt,name=instrumented_graph_def,json=instrumentedGraphDef,proto3" json:"instrumented_graph_def,omitempty"`
	// IDs of the immediate enclosing context (graph), if any.
	OuterContextId       string   `protobuf:"bytes,6,opt,name=outer_context_id,json=outerContextId,proto3" json:"outer_context_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebuggedGraph) Reset()         { *m = DebuggedGraph{} }
func (m *DebuggedGraph) String() string { return proto.CompactTextString(m) }
func (*DebuggedGraph) ProtoMessage()    {}
func (*DebuggedGraph) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_event_53a27412ea077773, []int{6}
}
func (m *DebuggedGraph) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebuggedGraph.Unmarshal(m, b)
}
func (m *DebuggedGraph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebuggedGraph.Marshal(b, m, deterministic)
}
func (dst *DebuggedGraph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebuggedGraph.Merge(dst, src)
}
func (m *DebuggedGraph) XXX_Size() int {
	return xxx_messageInfo_DebuggedGraph.Size(m)
}
func (m *DebuggedGraph) XXX_DiscardUnknown() {
	xxx_messageInfo_DebuggedGraph.DiscardUnknown(m)
}

var xxx_messageInfo_DebuggedGraph proto.InternalMessageInfo

func (m *DebuggedGraph) GetGraphId() string {
	if m != nil {
		return m.GraphId
	}
	return ""
}

func (m *DebuggedGraph) GetGraphName() string {
	if m != nil {
		return m.GraphName
	}
	return ""
}

func (m *DebuggedGraph) GetInstrumentedOps() []string {
	if m != nil {
		return m.InstrumentedOps
	}
	return nil
}

func (m *DebuggedGraph) GetOriginalGraphDef() []byte {
	if m != nil {
		return m.OriginalGraphDef
	}
	return nil
}

func (m *DebuggedGraph) GetInstrumentedGraphDef() []byte {
	if m != nil {
		return m.InstrumentedGraphDef
	}
	return nil
}

func (m *DebuggedGraph) GetOuterContextId() string {
	if m != nil {
		return m.OuterContextId
	}
	return ""
}

// A device on which ops and/or tensors are instrumented by the debugger.
type DebuggedDevice struct {
	// Name of the device.
	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// A debugger-generated ID for the device. Guaranteed to be unique within
	// the scope of the debugged TensorFlow program, including single-host and
	// multi-host settings.
	// TODO(cais): Test the uniqueness guarantee in multi-host settings.
	DeviceId             int32    `protobuf:"varint,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebuggedDevice) Reset()         { *m = DebuggedDevice{} }
func (m *DebuggedDevice) String() string { return proto.CompactTextString(m) }
func (*DebuggedDevice) ProtoMessage()    {}
func (*DebuggedDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_event_53a27412ea077773, []int{7}
}
func (m *DebuggedDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebuggedDevice.Unmarshal(m, b)
}
func (m *DebuggedDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebuggedDevice.Marshal(b, m, deterministic)
}
func (dst *DebuggedDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebuggedDevice.Merge(dst, src)
}
func (m *DebuggedDevice) XXX_Size() int {
	return xxx_messageInfo_DebuggedDevice.Size(m)
}
func (m *DebuggedDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_DebuggedDevice.DiscardUnknown(m)
}

var xxx_messageInfo_DebuggedDevice proto.InternalMessageInfo

func (m *DebuggedDevice) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *DebuggedDevice) GetDeviceId() int32 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// Data relating to the eager execution of an op or a Graph.
// For a op that generates N output tensors (N >= 0), only one
// Execution proto will be used to describe the execution event.
type Execution struct {
	// Op type (e.g., "MatMul").
	// In the case of a Graph, this is the name of the Graph.
	OpType string `protobuf:"bytes,1,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	// Number of output tensors.
	NumOutputs int32 `protobuf:"varint,2,opt,name=num_outputs,json=numOutputs,proto3" json:"num_outputs,omitempty"`
	// The graph that's executed: applicable only to the eager
	// execution of a FuncGraph.
	GraphId string `protobuf:"bytes,3,opt,name=graph_id,json=graphId,proto3" json:"graph_id,omitempty"`
	// IDs of the input tensors (if available).
	InputTensorIds []int64 `protobuf:"varint,4,rep,packed,name=input_tensor_ids,json=inputTensorIds,proto3" json:"input_tensor_ids,omitempty"`
	// IDs of the output tensors (if availbable).
	// If specified, must have the same length as tensor_protos.
	OutputTensorIds []int64 `protobuf:"varint,5,rep,packed,name=output_tensor_ids,json=outputTensorIds,proto3" json:"output_tensor_ids,omitempty"`
	// Type of the tensor value encapsulated in this proto.
	TensorDebugMode TensorDebugMode `protobuf:"varint,6,opt,name=tensor_debug_mode,json=tensorDebugMode,proto3,enum=tensorflow.TensorDebugMode" json:"tensor_debug_mode,omitempty"`
	// Output Tensor values in the type described by `tensor_value_type`.
	// The length of this should match `num_outputs`.
	TensorProtos []*tensor_go_proto.TensorProto `protobuf:"bytes,7,rep,name=tensor_protos,json=tensorProtos,proto3" json:"tensor_protos,omitempty"`
	// Stack trace of the eager execution.
	CodeLocation *CodeLocation `protobuf:"bytes,8,opt,name=code_location,json=codeLocation,proto3" json:"code_location,omitempty"`
	// Debugged-generated IDs of the devices on which the output tensors reside.
	// To look up details about the device (e.g., name), cross-reference this
	// field with the DebuggedDevice messages.
	OutputTensorDeviceIds []int32  `protobuf:"varint,9,rep,packed,name=output_tensor_device_ids,json=outputTensorDeviceIds,proto3" json:"output_tensor_device_ids,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Execution) Reset()         { *m = Execution{} }
func (m *Execution) String() string { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()    {}
func (*Execution) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_event_53a27412ea077773, []int{8}
}
func (m *Execution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Execution.Unmarshal(m, b)
}
func (m *Execution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Execution.Marshal(b, m, deterministic)
}
func (dst *Execution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Execution.Merge(dst, src)
}
func (m *Execution) XXX_Size() int {
	return xxx_messageInfo_Execution.Size(m)
}
func (m *Execution) XXX_DiscardUnknown() {
	xxx_messageInfo_Execution.DiscardUnknown(m)
}

var xxx_messageInfo_Execution proto.InternalMessageInfo

func (m *Execution) GetOpType() string {
	if m != nil {
		return m.OpType
	}
	return ""
}

func (m *Execution) GetNumOutputs() int32 {
	if m != nil {
		return m.NumOutputs
	}
	return 0
}

func (m *Execution) GetGraphId() string {
	if m != nil {
		return m.GraphId
	}
	return ""
}

func (m *Execution) GetInputTensorIds() []int64 {
	if m != nil {
		return m.InputTensorIds
	}
	return nil
}

func (m *Execution) GetOutputTensorIds() []int64 {
	if m != nil {
		return m.OutputTensorIds
	}
	return nil
}

func (m *Execution) GetTensorDebugMode() TensorDebugMode {
	if m != nil {
		return m.TensorDebugMode
	}
	return TensorDebugMode_UNSPECIFIED
}

func (m *Execution) GetTensorProtos() []*tensor_go_proto.TensorProto {
	if m != nil {
		return m.TensorProtos
	}
	return nil
}

func (m *Execution) GetCodeLocation() *CodeLocation {
	if m != nil {
		return m.CodeLocation
	}
	return nil
}

func (m *Execution) GetOutputTensorDeviceIds() []int32 {
	if m != nil {
		return m.OutputTensorDeviceIds
	}
	return nil
}

// Data relating to an execution of a Graph (e.g., an eager execution of a
// FuncGraph).
// The values of the intermediate tensors computed in the graph are recorded
// in this proto. A graph execution may correspond to one or more pieces of
// `GraphExecutionTrace`, depending on whether the instrumented tensor values
// are summarized in an aggregated or separate fashion.
type GraphExecutionTrace struct {
	// Unique ID of the context that the executed op(s) belong to (e.g., a
	// compiled concrete tf.function).
	TfdbgContextId string `protobuf:"bytes,1,opt,name=tfdbg_context_id,json=tfdbgContextId,proto3" json:"tfdbg_context_id,omitempty"`
	// Name of the op (applicable only in the case of the `FULL_TENSOR` trace
	// level).
	OpName string `protobuf:"bytes,2,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
	// Output slot of the tensor (applicable only in the case of the `FULL_TENSOR`
	// trace level).
	OutputSlot int32 `protobuf:"varint,3,opt,name=output_slot,json=outputSlot,proto3" json:"output_slot,omitempty"`
	// Type of the tensor value encapsulated in this proto.
	TensorDebugMode TensorDebugMode `protobuf:"varint,4,opt,name=tensor_debug_mode,json=tensorDebugMode,proto3,enum=tensorflow.TensorDebugMode" json:"tensor_debug_mode,omitempty"`
	// Tensor value in the type described by `tensor_value_type`.
	// This tensor may summarize the value of a single intermediate op of the
	// graph, or those of multiple intermediate tensors.
	TensorProto *tensor_go_proto.TensorProto `protobuf:"bytes,5,opt,name=tensor_proto,json=tensorProto,proto3" json:"tensor_proto,omitempty"`
	// Name of the device that the op belongs to.
	DeviceName           string   `protobuf:"bytes,6,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphExecutionTrace) Reset()         { *m = GraphExecutionTrace{} }
func (m *GraphExecutionTrace) String() string { return proto.CompactTextString(m) }
func (*GraphExecutionTrace) ProtoMessage()    {}
func (*GraphExecutionTrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_event_53a27412ea077773, []int{9}
}
func (m *GraphExecutionTrace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphExecutionTrace.Unmarshal(m, b)
}
func (m *GraphExecutionTrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphExecutionTrace.Marshal(b, m, deterministic)
}
func (dst *GraphExecutionTrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphExecutionTrace.Merge(dst, src)
}
func (m *GraphExecutionTrace) XXX_Size() int {
	return xxx_messageInfo_GraphExecutionTrace.Size(m)
}
func (m *GraphExecutionTrace) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphExecutionTrace.DiscardUnknown(m)
}

var xxx_messageInfo_GraphExecutionTrace proto.InternalMessageInfo

func (m *GraphExecutionTrace) GetTfdbgContextId() string {
	if m != nil {
		return m.TfdbgContextId
	}
	return ""
}

func (m *GraphExecutionTrace) GetOpName() string {
	if m != nil {
		return m.OpName
	}
	return ""
}

func (m *GraphExecutionTrace) GetOutputSlot() int32 {
	if m != nil {
		return m.OutputSlot
	}
	return 0
}

func (m *GraphExecutionTrace) GetTensorDebugMode() TensorDebugMode {
	if m != nil {
		return m.TensorDebugMode
	}
	return TensorDebugMode_UNSPECIFIED
}

func (m *GraphExecutionTrace) GetTensorProto() *tensor_go_proto.TensorProto {
	if m != nil {
		return m.TensorProto
	}
	return nil
}

func (m *GraphExecutionTrace) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func init() {
	proto.RegisterType((*DebugEvent)(nil), "tensorflow.DebugEvent")
	proto.RegisterType((*DebugMetadata)(nil), "tensorflow.DebugMetadata")
	proto.RegisterType((*SourceFile)(nil), "tensorflow.SourceFile")
	proto.RegisterType((*StackFrameWithId)(nil), "tensorflow.StackFrameWithId")
	proto.RegisterType((*CodeLocation)(nil), "tensorflow.CodeLocation")
	proto.RegisterType((*GraphOpCreation)(nil), "tensorflow.GraphOpCreation")
	proto.RegisterType((*DebuggedGraph)(nil), "tensorflow.DebuggedGraph")
	proto.RegisterType((*DebuggedDevice)(nil), "tensorflow.DebuggedDevice")
	proto.RegisterType((*Execution)(nil), "tensorflow.Execution")
	proto.RegisterType((*GraphExecutionTrace)(nil), "tensorflow.GraphExecutionTrace")
	proto.RegisterEnum("tensorflow.TensorDebugMode", TensorDebugMode_name, TensorDebugMode_value)
}

func init() {
	proto.RegisterFile("tensorflow/core/protobuf/debug_event.proto", fileDescriptor_debug_event_53a27412ea077773)
}

var fileDescriptor_debug_event_53a27412ea077773 = []byte{
	// 1246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x8e, 0x93, 0x26, 0x4d, 0x4e, 0x7e, 0x3b, 0xdd, 0x1f, 0x6f, 0x0b, 0x34, 0xe4, 0x62, 0x15,
	0x56, 0xd0, 0x4a, 0x0b, 0x08, 0x81, 0xe0, 0x62, 0x9b, 0xba, 0x6b, 0xa3, 0x6e, 0x52, 0x4d, 0x52,
	0x90, 0x10, 0xd2, 0xc8, 0xb5, 0x27, 0x89, 0xb5, 0x8e, 0xc7, 0xb2, 0xc7, 0xed, 0xee, 0x2d, 0xbc,
	0x02, 0xf7, 0x3c, 0x05, 0xbc, 0x04, 0x2f, 0xc4, 0x25, 0x9a, 0x19, 0xc7, 0x71, 0xdc, 0x96, 0x0b,
	0xb8, 0x89, 0xec, 0xef, 0x9c, 0xf3, 0xcd, 0x9c, 0xef, 0x7c, 0x33, 0x0e, 0xbc, 0xe0, 0x34, 0x88,
	0x59, 0x34, 0xf7, 0xd9, 0xed, 0x89, 0xc3, 0x22, 0x7a, 0x12, 0x46, 0x8c, 0xb3, 0xeb, 0x64, 0x7e,
	0xe2, 0xd2, 0xeb, 0x64, 0x41, 0xe8, 0x0d, 0x0d, 0xf8, 0xb1, 0x04, 0x11, 0x6c, 0x72, 0x0f, 0x9e,
	0x17, 0xeb, 0xe6, 0x91, 0xbd, 0xa2, 0xb7, 0x2c, 0x7a, 0x7b, 0xa2, 0x22, 0xaa, 0xe6, 0xe0, 0xe4,
	0x41, 0xfe, 0x45, 0x64, 0x87, 0x4b, 0xa2, 0x56, 0xf1, 0x82, 0x39, 0x53, 0x05, 0x83, 0xdf, 0xaa,
	0x00, 0x67, 0x02, 0x34, 0xc4, 0xca, 0xe8, 0x10, 0x1a, 0xb7, 0xb6, 0xef, 0x13, 0xee, 0xad, 0xa8,
	0xae, 0xf5, 0xb5, 0xa1, 0x86, 0xeb, 0x02, 0x98, 0x79, 0x2b, 0x8a, 0x10, 0xec, 0xc4, 0x9c, 0x86,
	0x7a, 0xb9, 0xaf, 0x0d, 0x2b, 0x58, 0x3e, 0xa3, 0x53, 0xe8, 0x28, 0xce, 0x15, 0xe5, 0xb6, 0x6b,
	0x73, 0x5b, 0xaf, 0xf4, 0xb5, 0x61, 0xf3, 0xe5, 0xb3, 0xe3, 0xcd, 0x4e, 0x8e, 0xe5, 0x02, 0x6f,
	0xd2, 0x04, 0xb3, 0x84, 0xdb, 0x6e, 0x1e, 0x40, 0x5f, 0x43, 0x33, 0x66, 0x49, 0xe4, 0x50, 0x32,
	0xf7, 0x7c, 0xaa, 0xef, 0x48, 0x82, 0x27, 0x79, 0x82, 0xa9, 0x0c, 0x9f, 0x7b, 0x3e, 0x35, 0x4b,
	0x18, 0xe2, 0xec, 0x0d, 0xbd, 0x81, 0xfd, 0x98, 0xdb, 0xce, 0x5b, 0x22, 0xf5, 0x20, 0xb7, 0x1e,
	0x5f, 0x12, 0xcf, 0xd5, 0x6b, 0x92, 0xe2, 0x83, 0x2d, 0x0a, 0x91, 0x76, 0x2e, 0xb2, 0x7e, 0xf4,
	0xf8, 0xd2, 0x72, 0xcd, 0x12, 0xee, 0xc5, 0x05, 0x0c, 0x59, 0xb0, 0xa7, 0x74, 0x62, 0x21, 0x71,
	0x22, 0x6a, 0x73, 0x8f, 0x05, 0xfa, 0xae, 0x24, 0x3b, 0xcc, 0x93, 0xbd, 0x16, 0x49, 0x93, 0x70,
	0x94, 0xa6, 0x98, 0x25, 0xdc, 0x5d, 0x6c, 0x43, 0x99, 0x30, 0x0b, 0xea, 0x12, 0x19, 0xd3, 0xeb,
	0x0f, 0x08, 0xb3, 0xa0, 0xae, 0xe4, 0xcb, 0x84, 0x59, 0x03, 0xe8, 0x4b, 0x68, 0xd0, 0x77, 0xd4,
	0x49, 0xe4, 0x36, 0x1a, 0xb2, 0xfc, 0x71, 0xbe, 0xdc, 0x58, 0x07, 0xcd, 0x12, 0xde, 0x64, 0xa2,
	0x2b, 0x78, 0xac, 0xba, 0xc8, 0x20, 0xc2, 0x23, 0xdb, 0xa1, 0x3a, 0x48, 0x8a, 0xa3, 0x3b, 0x9d,
	0x64, 0x3c, 0x33, 0x91, 0x66, 0x96, 0xf0, 0xfe, 0xe2, 0x2e, 0x8c, 0x0e, 0xa1, 0xae, 0x68, 0x3d,
	0x57, 0x6f, 0xf6, 0xb5, 0x61, 0xc3, 0x2c, 0xe1, 0x5d, 0x89, 0x58, 0x2e, 0x32, 0xa0, 0x9b, 0xb5,
	0xeb, 0xd2, 0x1b, 0xcf, 0xa1, 0x7a, 0x4b, 0xae, 0x76, 0x70, 0x5f, 0xbf, 0x67, 0x32, 0xc3, 0x2c,
	0xe1, 0x4c, 0x23, 0x85, 0x9c, 0xd6, 0x60, 0xe7, 0x76, 0x69, 0xf3, 0xc1, 0xaf, 0x1a, 0xb4, 0xb7,
	0x5c, 0x83, 0x3e, 0x03, 0xb4, 0x21, 0x22, 0x37, 0x34, 0x8a, 0x85, 0x28, 0xc2, 0xa2, 0x0d, 0xbc,
	0xb7, 0x89, 0xfc, 0xa0, 0x02, 0xe8, 0x63, 0x68, 0x09, 0x33, 0x65, 0x89, 0x65, 0x99, 0xd8, 0x14,
	0xd8, 0x3a, 0xa5, 0x0f, 0x2d, 0x3e, 0x77, 0xaf, 0x17, 0x24, 0x4a, 0x02, 0xd1, 0x53, 0x45, 0xa6,
	0x80, 0xc4, 0x70, 0x12, 0x58, 0xee, 0xe0, 0x67, 0x80, 0x8d, 0xf3, 0xc4, 0xd9, 0x90, 0x94, 0xa1,
	0xcd, 0x97, 0xe9, 0xc2, 0x75, 0x01, 0x5c, 0xda, 0x7c, 0x29, 0x82, 0x4b, 0x16, 0x73, 0x12, 0xd8,
	0x2b, 0x9a, 0x2e, 0x56, 0x17, 0xc0, 0xd8, 0x5e, 0x51, 0xf4, 0x08, 0xaa, 0xbe, 0x17, 0xd0, 0x58,
	0xaf, 0xf4, 0x2b, 0xc3, 0x06, 0x56, 0x2f, 0x83, 0x00, 0x7a, 0x45, 0x53, 0xa2, 0x0e, 0x94, 0x3d,
	0x37, 0x25, 0x2f, 0x7b, 0x2e, 0xfa, 0x1e, 0xda, 0x72, 0x4d, 0x51, 0x41, 0x1c, 0xe6, 0x4b, 0xea,
	0xe6, 0xcb, 0xe7, 0x77, 0x46, 0x28, 0xc5, 0xb2, 0xc4, 0xb9, 0x16, 0x7b, 0xbd, 0xf0, 0x02, 0x3a,
	0x62, 0xbe, 0xea, 0x37, 0x7d, 0x19, 0x4c, 0xa1, 0x35, 0x62, 0x2e, 0xbd, 0x60, 0x8e, 0x72, 0xe8,
	0xd6, 0x96, 0xb5, 0xc2, 0x96, 0x9f, 0x43, 0x37, 0x7f, 0xb0, 0x3c, 0x37, 0xd6, 0xcb, 0x72, 0xf3,
	0xed, 0xcd, 0xa1, 0xb1, 0xdc, 0x78, 0xf0, 0x57, 0x19, 0xba, 0x85, 0xd3, 0x80, 0x9e, 0xc2, 0x2e,
	0x0b, 0x09, 0x7f, 0x1f, 0xae, 0x69, 0x6b, 0x2c, 0x9c, 0xbd, 0x0f, 0x69, 0x1a, 0xc8, 0x49, 0x54,
	0x63, 0xa1, 0x5c, 0xed, 0x43, 0x00, 0x65, 0x2d, 0x19, 0x53, 0x83, 0x68, 0x48, 0x44, 0x86, 0x9f,
	0xe5, 0x9c, 0xb7, 0x23, 0x83, 0x99, 0xef, 0x8e, 0xa0, 0xa9, 0xec, 0xa6, 0x4a, 0xab, 0x6a, 0x86,
	0x0a, 0x92, 0xb5, 0x47, 0xd0, 0xf4, 0x82, 0x30, 0x51, 0x6d, 0xc6, 0x7a, 0x4d, 0x36, 0x01, 0x12,
	0x12, 0xf1, 0x58, 0x24, 0x04, 0xc9, 0x8a, 0xb0, 0x84, 0x87, 0x09, 0x8f, 0xe5, 0x69, 0xaf, 0x62,
	0x08, 0x92, 0xd5, 0x44, 0x21, 0xe8, 0x3b, 0x68, 0x3b, 0xcc, 0xa5, 0xc4, 0x4f, 0x85, 0x4b, 0x0f,
	0xb2, 0x9e, 0x9f, 0x41, 0x5e, 0x58, 0xdc, 0x72, 0xf2, 0x32, 0xbf, 0x80, 0x3d, 0xc5, 0x4d, 0x54,
	0xbe, 0xd4, 0xb2, 0xd1, 0xaf, 0x0c, 0xab, 0xb8, 0xab, 0x02, 0x33, 0x89, 0x0b, 0x35, 0x7f, 0x29,
	0xa7, 0xb6, 0xcf, 0xae, 0x80, 0x7c, 0xeb, 0xda, 0x76, 0xeb, 0xdb, 0xa2, 0x95, 0x8b, 0xa2, 0x7d,
	0x02, 0x3d, 0x2f, 0x88, 0x79, 0x94, 0xac, 0x68, 0xc0, 0xa9, 0x4b, 0x58, 0xb8, 0xf6, 0x5f, 0x37,
	0x8f, 0x4f, 0xc2, 0x18, 0x7d, 0x0a, 0x88, 0x45, 0xde, 0xc2, 0x0b, 0x6c, 0x9f, 0xac, 0xbf, 0x13,
	0x73, 0xa9, 0x74, 0x0b, 0xf7, 0xd6, 0x91, 0xd4, 0x66, 0x73, 0xf4, 0x05, 0x3c, 0xd9, 0x22, 0xde,
	0x54, 0x54, 0x65, 0xc5, 0xa3, 0x7c, 0x34, 0xab, 0x1a, 0x42, 0x8f, 0x25, 0x9c, 0x46, 0xc4, 0x61,
	0x01, 0xa7, 0xef, 0xf8, 0xfa, 0x9a, 0x6e, 0xe0, 0x8e, 0xc4, 0x47, 0x0a, 0xb6, 0xdc, 0xc1, 0x18,
	0x3a, 0xdb, 0xf7, 0x44, 0x71, 0xc8, 0xda, 0x9d, 0x21, 0x1f, 0x42, 0x23, 0x4d, 0xf0, 0x5c, 0xa9,
	0x44, 0x15, 0xd7, 0x15, 0x60, 0xb9, 0x83, 0x3f, 0x2a, 0xd0, 0xc8, 0xae, 0xb2, 0x87, 0xcd, 0x59,
	0xf0, 0x41, 0xf9, 0x8e, 0x0f, 0xf2, 0xa3, 0xa8, 0x6c, 0x8f, 0x62, 0x28, 0xb4, 0x2e, 0x8c, 0x78,
	0xa7, 0x5f, 0x19, 0x56, 0x70, 0x47, 0xe2, 0xd9, 0x84, 0xef, 0x77, 0x43, 0x55, 0xa6, 0x16, 0xdd,
	0x80, 0x5e, 0x43, 0x7a, 0xb1, 0xa5, 0x9f, 0xed, 0x15, 0x73, 0xa9, 0xd4, 0xac, 0xb3, 0xfd, 0x35,
	0x52, 0x15, 0xea, 0xba, 0x64, 0x2e, 0xc5, 0x5d, 0xbe, 0x0d, 0xa0, 0x6f, 0xa1, 0x9d, 0x12, 0xc9,
	0x8f, 0xbe, 0x30, 0x79, 0x65, 0xd8, 0x7c, 0xf9, 0xf4, 0x2e, 0xc9, 0xa5, 0x88, 0xe3, 0x16, 0xdf,
	0xbc, 0xfc, 0x6f, 0xff, 0x7f, 0x05, 0xfa, 0x76, 0xc7, 0xd9, 0xa4, 0xd6, 0xc7, 0xe0, 0x71, 0xbe,
	0xf1, 0xb3, 0x74, 0x6c, 0xf1, 0xe0, 0xf7, 0x32, 0xec, 0xdf, 0xf3, 0x79, 0x12, 0x62, 0xab, 0x7b,
	0x3b, 0xe7, 0x24, 0x35, 0xca, 0x8e, 0xc4, 0x33, 0x27, 0x3d, 0x7c, 0xdf, 0x1c, 0x41, 0x33, 0xdd,
	0x53, 0xec, 0x33, 0x2e, 0xa7, 0x59, 0xc5, 0xa0, 0xa0, 0xa9, 0xcf, 0xf8, 0xfd, 0xd2, 0xef, 0xfc,
	0x07, 0xe9, 0xbf, 0x81, 0x56, 0x5e, 0x7a, 0x79, 0x44, 0xfe, 0x45, 0xf9, 0x66, 0x4e, 0xf9, 0xa2,
	0xed, 0x6b, 0x45, 0xdb, 0xbf, 0xf8, 0x53, 0x83, 0x6e, 0x61, 0x07, 0xa8, 0x0b, 0xcd, 0xab, 0xf1,
	0xf4, 0xd2, 0x18, 0x59, 0xe7, 0x96, 0x71, 0xd6, 0x2b, 0xa1, 0x36, 0x34, 0xc6, 0x13, 0x32, 0x33,
	0xc6, 0xd3, 0x09, 0xee, 0x69, 0x22, 0x3e, 0xba, 0xc2, 0x33, 0x62, 0x1a, 0xaf, 0x2e, 0x66, 0x66,
	0xaf, 0x8c, 0x10, 0x74, 0x46, 0x93, 0xf1, 0xc8, 0x9a, 0x1a, 0x6b, 0xac, 0x22, 0x92, 0xce, 0xaf,
	0x2e, 0x2e, 0xd6, 0xc0, 0x0e, 0x6a, 0x40, 0x75, 0x6a, 0xbe, 0xba, 0x34, 0x7a, 0x55, 0xb4, 0x07,
	0x6d, 0x19, 0x1b, 0x5f, 0xbd, 0x31, 0xb0, 0x35, 0x9a, 0xf6, 0x6a, 0x59, 0x7a, 0xba, 0xc8, 0x2e,
	0xfa, 0x08, 0x0e, 0xb0, 0x71, 0x76, 0x35, 0x32, 0x88, 0x35, 0x3e, 0x27, 0xe3, 0x57, 0x63, 0x32,
	0x33, 0xb1, 0x61, 0x90, 0xe9, 0xc5, 0x64, 0x36, 0xed, 0xd5, 0x4f, 0x6f, 0x60, 0x9f, 0x45, 0x8b,
	0xbc, 0x08, 0x09, 0xf7, 0xfc, 0xd3, 0xde, 0xe6, 0x9f, 0xa8, 0xf2, 0xde, 0xa5, 0xf6, 0x93, 0xb9,
	0xf0, 0xf8, 0x32, 0xb9, 0x3e, 0x76, 0xd8, 0x2a, 0xff, 0xe7, 0xf6, 0xfe, 0xc7, 0x05, 0x53, 0xff,
	0x7a, 0xc5, 0x4f, 0xea, 0x75, 0xb2, 0x60, 0xea, 0xe9, 0x6f, 0x4d, 0xbb, 0xae, 0xc9, 0xa7, 0xcf,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x08, 0x24, 0xe0, 0x76, 0x87, 0x0b, 0x00, 0x00,
}
